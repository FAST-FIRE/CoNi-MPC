extern "C"
{
#include "@ACADO_COMMON_HEADER@"
}

#include "INCLUDE/@SOLVER_NAME@.hpp"

#if @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX == 1
#include "INCLUDE/EXTRAS/SolutionAnalysis.hpp"
#endif /* @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX */

static int @MODULE_NAME@_@PREFIX@nWSR;

@USE_NAMESPACE@

#if @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX == 1
static SolutionAnalysis @MODULE_NAME@_sa;
#endif /* @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX */

int @MODULE_NAME@_@PREFIX@solve( void )
{
	@MODULE_NAME@_@PREFIX@nWSR = QPOASES_NWSRMAX;

	@CTOR@;
	
	returnValue retVal = qp.init(@CALL_SOLVER@);

    qp.getPrimalSolution( @PRIMAL_SOLUTION@ );
    qp.getDualSolution( @DUAL_SOLUTION@ );
	
#if @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX == 1

	if (retVal != SUCCESSFUL_RETURN)
		return (int)retVal;
		
	retVal = @MODULE_NAME@_sa.getHessianInverse( &qp,@SIGMA@ );

#endif /* @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX */

	return (int)retVal;
}

int @MODULE_NAME@_@PREFIX@getNWSR( void )
{
	return @MODULE_NAME@_@PREFIX@nWSR;
}

const char* @MODULE_NAME@_@PREFIX@getErrorString( int error )
{
	return MessageHandling::getErrorString( error );
}
