%% Legacy code wrapper for the ACADO CGT generated OCP solver

% Dimensions
@MODULE_PREFIX@_N   = @N@;
@MODULE_PREFIX@_NX  = @NX@;
@MODULE_PREFIX@_NDX = @NDX@;
@MODULE_PREFIX@_NXA = @NXA@;
@MODULE_PREFIX@_NU  = @NU@;
@MODULE_PREFIX@_NOD = @NOD@;
@MODULE_PREFIX@_NY  = @NY@;
@MODULE_PREFIX@_NYN = @NYN@;

@MODULE_PREFIX@_QP_SOLVER                   = '@QP_SOLVER@';
@MODULE_PREFIX@_INITIAL_STATE_FIXED         = @INIT_STATE_FIXED@;
@MODULE_PREFIX@_WEIGHTING_MATRICES_TYPE     = @WEIGHT_MATRIX_TYPE@;
@MODULE_PREFIX@_HARDCODED_CONSTRAINT_VALUES = @HARCODED_CONSTRAINTS@;
@MODULE_PREFIX@_USE_ARRIVAL_COST            = @ARRIVAL_COST@;
@MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX   = @COV_MATRIX@;

aSfunName  = '@MODULE_NAME@_solver_sfun';
aRealT     = '@REAL_TYPE@';
aHeaderFile = '@MODULE_NAME@_solver_sfunction.h';

%% Define busses

clear avCells aInput aOutput @MODULE_PREFIX@data @MODULE_PREFIX@input @MODULE_PREFIX@output;

% Define ACADOvariables bus:
avCells = {'@MODULE_PREFIX@data', aHeaderFile, '', 'Auto', '-1', {}};

idx = 1;
avCells{ 6 }{ idx } = {'x', [1, (@MODULE_PREFIX@_N + 1) * @MODULE_PREFIX@_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1; 
avCells{ 6 }{ idx } = {'u', [1, @MODULE_PREFIX@_N * @MODULE_PREFIX@_NU], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;

if @MODULE_PREFIX@_NXA > 0
    avCells{ 6 }{ idx } = {'z', [1, @MODULE_PREFIX@_N * @MODULE_PREFIX@_NXA], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if @MODULE_PREFIX@_NOD > 0
    avCells{ 6 }{ idx } = {'od', [1, (@MODULE_PREFIX@_N + 1) * @MODULE_PREFIX@_NOD], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

avCells{ 6 }{ idx } = {'y', [1, @MODULE_PREFIX@_N * @MODULE_PREFIX@_NY], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1; 
avCells{ 6 }{ idx } = {'yN', [1, @MODULE_PREFIX@_NYN], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;

if @MODULE_PREFIX@_WEIGHTING_MATRICES_TYPE == 1
    avCells{ 6 }{ idx } = {'W', [1, @MODULE_PREFIX@_NY * @MODULE_PREFIX@_NY], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
elseif @MODULE_PREFIX@_WEIGHTING_MATRICES_TYPE == 2
    avCells{ 6 }{ idx } = {'W', [1, @MODULE_PREFIX@_NY * @MODULE_PREFIX@_N * @MODULE_PREFIX@_NY], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if @MODULE_PREFIX@_WEIGHTING_MATRICES_TYPE ~= 0
    avCells{ 6 }{ idx } = {'WN', [1, @MODULE_PREFIX@_NYN * @MODULE_PREFIX@_NYN], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if @MODULE_PREFIX@_USE_ARRIVAL_COST == 1
	avCells{ 6 }{ idx } = {'xAC', [1, @MODULE_PREFIX@_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
	avCells{ 6 }{ idx } = {'SAC', [1, @MODULE_PREFIX@_NX * @MODULE_PREFIX@_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
	avCells{ 6 }{ idx } = {'WL', [1, @MODULE_PREFIX@_NX * @MODULE_PREFIX@_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if @MODULE_PREFIX@_INITIAL_STATE_FIXED == 1
    avCells{ 6 }{ idx } = {'x0', [1, @MODULE_PREFIX@_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if @MODULE_PREFIX@_COMPUTE_COVARIANCE_MATRIX == 1
    avCells{ 6 }{ idx } = {'sigmaN', [1, @MODULE_PREFIX@_NX * @MODULE_PREFIX@_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

% Define input bus for the Simulink component:
aInput = { ...
	'@MODULE_PREFIX@input', aHeaderFile, '', ...
	{
		{'control', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'shifting', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'initialization', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'data', 1, '@MODULE_PREFIX@data', -1, 'real', 'Sample', 'Fixed', [], []}; ...
	}
	};

% Define output bus for the Simulink component:
aOutput = { ...
	'@MODULE_PREFIX@output', aHeaderFile, '', ...
	{
		{'status', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'kktValue', 1, aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'objValue', 1, aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'execTime', 1, aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'data', 1, '@MODULE_PREFIX@data', -1, 'real', 'Sample', 'Fixed', [], []}; ...
	}
	};

% Generate all structures
Simulink.Bus.cellToObject( {avCells, aInput, aOutput} );

%% Define S-function wrapper

clear @MODULE_PREFIX@Def;

@MODULE_PREFIX@Def = legacy_code('initialize');

if strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES')
	@MODULE_PREFIX@Def.Options.language = 'C++';
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES3')
	@MODULE_PREFIX@Def.Options.language = 'C';
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPDUNES')
	@MODULE_PREFIX@Def.Options.language = 'C';
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'HPMPC')
	@MODULE_PREFIX@Def.Options.language = 'C';
else
	error('Unknown QP solver')
end;


% Define the S-function name
@MODULE_PREFIX@Def.SFunctionName = aSfunName;

% Define source files
@MODULE_PREFIX@Def.SourceFiles = { ...
	'@MODULE_NAME@_solver.c', ...
	'@MODULE_NAME@_integrator.c', ...
	'@MODULE_NAME@_auxiliary_functions.c', ...
	'@MODULE_NAME@_solver_sfunction.c' ...
	};
	
if strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES')
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = '@MODULE_NAME@_qpoases_interface.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/Bounds.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/Constraints.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/CyclingManager.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/Indexlist.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/MessageHandling.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/QProblem.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/QProblemB.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/SubjectTo.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/Utils.cpp';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases/SRC/EXTRAS/SolutionAnalysis.cpp';
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES3')
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = '@MODULE_NAME@_qpoases3_interface.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Bounds.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Constraints.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Indexlist.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Matrices.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/MessageHandling.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Options.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Flipper.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/QProblem.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/QProblemB.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpoases3/src/Utils.c';
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPDUNES')
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpdunes/src/dual_qp.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpdunes/src/matrix_vector.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpdunes/src/setup_qp.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpdunes/src/stage_qp_solver_clipping.c';
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = 'qpdunes/src/utils.c';
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'HPMPC')
	@MODULE_PREFIX@Def.SourceFiles{end + 1} = '@MODULE_NAME@_hpmpc_interface.c';
else
	error('Unknown QP solver')
end;

% Define header files
@MODULE_PREFIX@Def.HeaderFiles = {'@MODULE_NAME@_common.h', aHeaderFile};

% Define include folders
if strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES')
	@MODULE_PREFIX@Def.IncPaths = { ...
    	'qpoases', ...
		'qpoases/INCLUDE', ...
		'qpoases/SRC' ...
	};
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES3')
	@MODULE_PREFIX@Def.IncPaths = { ...
    	'qpoases3', ...
		'qpoases3/include', ...
		'qpoases3/src' ...
	};
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPDUNES')
	@MODULE_PREFIX@Def.IncPaths = { ...
		'qpdunes/include', ...
	};
elseif strcmp(@MODULE_PREFIX@_QP_SOLVER, 'HPMPC')
	@MODULE_PREFIX@Def.IncPaths = { ...
		'hpmpc/include', ...
	};
else
	error('Unknown QP solver')
end;

% link against some libs maybe
ldFlags = '';
if (isunix() && ~ismac())
%	ldFlags = [ldFlags '-lrt'];
elseif (ispc)
    ldFlags = [ldFlags '-DWIN32'];
end;

%add Hpmpc static library
if strcmp(ACADO_QP_SOLVER, 'HPMPC')
    ACADODef.LibPaths = {'hpmpc'};
    ACADODef.HostLibFiles = {'libhpmpc.a'};
end
% Add an extra option for qpOASES
iFlags = {''};
if (~strcmp(aSfunName, 'acado_solver_sfun')) && (strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES'))
    iFlags = {'-DQPOASES_CUSTOM_INTERFACE="@MODULE_NAME@_qpoases_interface.hpp"'};    
end;
if strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPOASES3')
    iFlags = {'-D__CODE_GENERATION__', '-DQPOASES_CUSTOM_INTERFACE="@MODULE_NAME@_qpoases3_interface.h"'};    
end;
if strcmp(@MODULE_PREFIX@_QP_SOLVER, 'QPDUNES')
	iFlags = {'-D__SIMPLE_BOUNDS_ONLY__'};
end;
if strcmp(ACADO_QP_SOLVER, 'HPMPC')
	iFlags = '';
end;i

% Define output function declaration
@MODULE_PREFIX@Def.OutputFcnSpec = [ ...
	'@MODULE_NAME@_step(' ... % Wrapper function name
	'@MODULE_PREFIX@input u1[1], ' ...	% Input argument
	'@MODULE_PREFIX@output y1[1])' ...	% Output argument
	];
% Define init function declaration
@MODULE_PREFIX@Def.StartFcnSpec     = '@MODULE_NAME@_initialize( void )';
% Define terminate function declaration
@MODULE_PREFIX@Def.TerminateFcnSpec = '@MODULE_NAME@_cleanup( void )';

%% Generate S-function source file
legacy_code('sfcn_cmex_generate', @MODULE_PREFIX@Def);

%% Compile the code
legacy_code('compile', @MODULE_PREFIX@Def, {iFlags{:}, ldFlags});

%% Generate a TLC file and simulation block
legacy_code('slblock_generate', @MODULE_PREFIX@Def);
legacy_code('sfcn_tlc_generate', @MODULE_PREFIX@Def);
% Mandatory, because not all the source and header files are in the same folder
legacy_code('rtwmakecfg_generate', @MODULE_PREFIX@Def);

%% Remove dependency on the header file and regenerate the Simulink structures

avCells{ 2 } = '';
aInput{ 2 } = '';
aOutput{ 2 } = '';

% Generate all structures
Simulink.Bus.cellToObject( {avCells, aInput, aOutput} );

%% Clear byproducts
clear aInput aOutput avCells idx iFlags ldFlags aSfunName aRealT aHeaderFile;
