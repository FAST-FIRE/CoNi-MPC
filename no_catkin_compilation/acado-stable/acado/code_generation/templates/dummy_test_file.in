
/*

IMPORTANT: This file should serve as a starting point to develop the user
code for the OCP solver. The code below is for illustration purposes. Most
likely you will not get good results if you execute this code without any
modification(s).

Please read the examples in order to understand how to write user code how
to run the OCP solver. You can find more info on the website:
www.acadotoolkit.org

*/

#include "@MODULE_NAME@_common.h"
#include "@MODULE_NAME@_auxiliary_functions.h"

#include <stdio.h>

/* Some convenient definitions. */
#define NX          @MODULE_PREFIX@_NX  /* Number of differential state variables.  */
#define NXA         @MODULE_PREFIX@_NXA /* Number of algebraic variables. */
#define NU          @MODULE_PREFIX@_NU  /* Number of control inputs. */
#define NOD         @MODULE_PREFIX@_NOD  /* Number of online data values. */

#define NY          @MODULE_PREFIX@_NY  /* Number of measurements/references on nodes 0..N - 1. */
#define NYN         @MODULE_PREFIX@_NYN /* Number of measurements/references on node N. */

#define N           @MODULE_PREFIX@_N   /* Number of intervals in the horizon. */

#define NUM_STEPS   10        /* Number of real-time iterations. */
#define VERBOSE     1         /* Show iterations: 1, silent: 0.  */

/* Global variables used by the solver. */
@MODULE_PREFIX@variables @MODULE_NAME@Variables;
@MODULE_PREFIX@workspace @MODULE_NAME@Workspace;

/* A template for testing of the solver. */
int main( )
{
	/* Some temporary variables. */
	int    i, iter;
	@MODULE_NAME@_timer t;

	/* Initialize the solver. */
	@MODULE_NAME@_initializeSolver();

	/* Initialize the states and controls. */
	for (i = 0; i < NX * (N + 1); ++i)  @MODULE_NAME@Variables.x[ i ] = 0.0;
	for (i = 0; i < NU * N; ++i)  @MODULE_NAME@Variables.u[ i ] = 0.0;

	/* Initialize the measurements/reference. */
	for (i = 0; i < NY * N; ++i)  @MODULE_NAME@Variables.y[ i ] = 0.0;
	for (i = 0; i < NYN; ++i)  @MODULE_NAME@Variables.yN[ i ] = 0.0;

	/* MPC: initialize the current state feedback. */
#if @MODULE_PREFIX@_INITIAL_STATE_FIXED
	for (i = 0; i < NX; ++i) @MODULE_NAME@Variables.x0[ i ] = 0.1;
#endif

	if( VERBOSE ) @MODULE_NAME@_printHeader();

	/* Prepare first step */
	@MODULE_NAME@_preparationStep();

	/* Get the time before start of the loop. */
	@MODULE_NAME@_tic( &t );

	/* The "real-time iterations" loop. */
	for(iter = 0; iter < NUM_STEPS; ++iter)
	{
        /* Perform the feedback step. */
		@MODULE_NAME@_feedbackStep( );

		/* Apply the new control immediately to the process, first NU components. */

		if( VERBOSE ) printf("\tReal-Time Iteration %d:  KKT Tolerance = %.3e\n\n", iter, @MODULE_NAME@_getKKT() );

		/* Optional: shift the initialization (look at @MODULE_NAME@_common.h). */
        /* @MODULE_NAME@_shiftStates(2, 0, 0); */
		/* @MODULE_NAME@_shiftControls( 0 ); */

		/* Prepare for the next step. */
		@MODULE_NAME@_preparationStep();
	}
	/* Read the elapsed time. */
	real_t te = @MODULE_NAME@_toc( &t );

	if( VERBOSE ) printf("\n\nEnd of the RTI loop. \n\n\n");

	/* Eye-candy. */

	if( !VERBOSE )
	printf("\n\n Average time of one real-time iteration:   %.3g microseconds\n\n", 1e6 * te / NUM_STEPS);

	@MODULE_NAME@_printDifferentialVariables();
	@MODULE_NAME@_printControlVariables();

    return 0;
}
