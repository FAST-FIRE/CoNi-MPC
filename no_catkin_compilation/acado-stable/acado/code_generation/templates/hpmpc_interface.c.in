/**************************************************************************************************
*                                                                                                 *
* Author: Niels van Duijkeren, niels.vanduijkeren (at) kuleuven.be                                *
*  based on interface by: Gianluca Frison, giaf (at) dtu.dk                                       *
*                                                                                                 *
**************************************************************************************************/

#include <math.h>

/* Stdlib for malloc */
#include <stdlib.h>

/* HPMPC header */
#include <c_interface.h>

// problem size (states, inputs, horizon)
#define NX @MODULE_PREFIX@_NX
#define NU @MODULE_PREFIX@_NU
#define N @MODULE_PREFIX@_N

// free initial state: 0 mpc, 1 mhe
#define FREE_X0 0

// warm-start with user-provided solution (otherwise initialize x and u with 0 or something feasible)
#define WARM_START @WARM_START@
#define MU0 0.0

// number of iterations of IP method
#define K_MAX @MAX_ITER@

// tolerance in the duality measure
#define MU_TOL 1e-8

// minimum accepted step length
#define ALPHA_MIN 1e-8

// infinite bound for HPMPC: use to detect dummy bounds
#define INF_BOUND 1e11

// Debug flag TODO
#define PC_DEBUG @PRINT_LEVEL@

static double* @MODULE_NAME@_work;
static int @MODULE_NAME@_hpmpc_init = 0;

void @MODULE_NAME@_hpmpc_init_fun(int *nx, int *nu, int *nb, int **hidxb, int *ng, int N2)
{
  int hpmpc_workspace_size = hpmpc_d_ip_ocp_hard_tv_work_space_size_bytes(N, nx, nu, nb, hidxb, ng, N2);
  @MODULE_NAME@_work = (real_t*)malloc(hpmpc_workspace_size);

  @MODULE_NAME@_hpmpc_init = 1;
}

/* version dealing with equality constraitns: is lb=ub, then fix the variable (corresponding column in A or B set to zero, and updated b) */
int @MODULE_NAME@_hpmpc_wrapper( real_t* A, real_t* B, real_t* b,
                            real_t* Q, real_t* Qf, real_t* S, real_t* R,
                            real_t* q, real_t* qf, real_t* r,
                            real_t* lb, real_t* ub,
                            real_t* C, real_t* D, real_t* lbg, real_t* ubg, real_t* CN,
                            real_t* x, real_t* u,
                            real_t* lambda, real_t* mu,
                            int* nIt )
{
  int i, j, ii, offset;
  int hpmpc_status = -1;

  // statistics from the IP routine
  static real_t stat[5*K_MAX];

  // array with number of path-constraints for every stage
  @QP_ND_ARRAY@

  // accumulated number of path-constraints for every stage
  unsigned int nDac [N+2];
  nDac[0] = 0;
  for(int i=0; i<N+1; ++i) nDac[i+1] = nDac[i] + nD[i];

  // initialize some temporary memory for the simple bounds
  int work_idxb [(NX+NU)*(N+1)];
  real_t work_lb [(NX+NU)*(N+1)];
  real_t work_ub [(NX+NU)*(N+1)];
  real_t work_mu [@QP_DIMMU@];

  // declare qp solver arguments
  int nx [N+1];
  int nu_N [N+1];
  int nb [N+1];
  int* hidxb [N+1];
  int ng [N+1];
  int N2 = N; // no partial condensing
  double* hA [N];
  double* hB [N];
  double* hb [N];
  double* hQ [N+1];
  double* hS [N];
  double* hR [N];
  double* hq [N+1];
  double* hr [N];
  double* hlb [N+1];
  double* hub [N+1];
  double* hC [N+1];
  double* hD [N];
  double* hlg [N+1];
  double* hug [N+1];
  double* hx [N+1];
  double* hu [N];
  double* hmu [N+1];
  double* hlambda [N];

  // define qp solver arguments
  //nx
  nx[0] = 0;
  for (i=1; i<N+1; ++i) nx[i] = NX;
  //nu
  for (i=0; i<N; ++i) nu_N[i] = NU;
  nu_N[N] = 0;
  //nb & hidxb & hlb & hub
  ///first stage (bounds on controls only)
  nb[0] = 0;
  hidxb[0] = work_idxb;
  hlb[0] = work_lb;
  hub[0] = work_ub;
  for (i=0; i<NU; ++i) {
    if (lb[i] > -INF_BOUND) {
      hlb[0][nb[0]] = lb[i];
      hub[0][nb[0]] = ub[i];
      hidxb[0][nb[0]] = i;
      ++nb[0];
    } else if (ub[i] < INF_BOUND) {
      hlb[0][nb[0]] = lb[i];
      hub[0][nb[0]] = ub[i];
      hidxb[0][nb[0]] = i;
      ++nb[0];
    }
  }
  ///middle stages
  for(j=1; j<N; ++j) {
    nb[j] = 0;
    hidxb[j] = work_idxb + j*(NX+NU);
    hlb[j] = work_lb + j*(NX+NU);
    hub[j] = work_ub + j*(NX+NU);
    for (i=0; i<NU; ++i) {
      if (lb[j*NU+i] > -INF_BOUND) {
        hlb[j][nb[j]] = lb[j*NU+i];
        hub[j][nb[j]] = ub[j*NU+i];
        hidxb[j][nb[j]] = i;
        ++nb[j];
      } else if (ub[j*NU+i] < INF_BOUND) {
        hlb[j][nb[j]] = lb[j*NU+i];
        hub[j][nb[j]] = ub[j*NU+i];
        hidxb[j][nb[j]] = i;
        ++nb[j];
      }
    }
    for (i=0; i<NX; ++i) {
      // lb and ub do not contain bounds on x0, hence the -NX offset
      offset = NU*N+NX*(j-1)+i;
      if (lb[offset] > -INF_BOUND) {
        hlb[j][nb[j]] = lb[offset];
        hub[j][nb[j]] = ub[offset];
        hidxb[j][nb[j]] = NU + i;
        ++nb[j];
      } else if (ub[offset] < INF_BOUND) {
        hlb[j][nb[j]] = lb[offset];
        hub[j][nb[j]] = ub[offset];
        hidxb[j][nb[j]] = NU + i;
        ++nb[j];
      }
    }
  }
  ///last stage (copy constraints from second to last)
  nb[N] = 0;
  hidxb[N] = work_idxb + N*(NX+NU);
  hlb[N] = work_lb + N*(NX+NU);
  hub[N] = work_ub + N*(NX+NU);
  for (i=0; i<NX; ++i) {
    // lb and ub do not contain bounds on x0, hence the -NX offset
    offset = NU*N+NX*(N-1)+i;
    if (lb[offset] > -INF_BOUND) {
      hlb[N][nb[N]] = lb[offset];
      hub[N][nb[N]] = ub[offset];
      hidxb[N][nb[N]] = i;
      ++nb[N];
    } else if (ub[offset] < INF_BOUND) {
      hlb[N][nb[N]] = lb[offset];
      hub[N][nb[N]] = ub[offset];
      hidxb[N][nb[N]] = i;
      ++nb[N];
    }
  }
  //ng & hC & hD & hlg & hug
  ///first and middle stages
  for (j=0; j<N; ++j) {
    ng[j] = nD[j];
    hC[j] = C + NX*nDac[j];
    hD[j] = D + NU*nDac[j];
    hlg[j] = lbg + nDac[j];
    hug[j] = ubg + nDac[j];
  }
  ///last stage
  ng[N] = nD[N];
  hC[N] = CN;
  hlg[N] = lbg + nDac[N];
  hug[N] = ubg + nDac[N];
  //hA & hB & hb
  for (i=0; i<N; ++i) {
    hA[i] = &A[i*NX*NX];
    hB[i] = &B[i*NX*NU];
    hb[i] = &b[i*NX];
  }
  //hQ & hS & hR & hq & hr
  ///first and middle stages
  for (i=0; i<N; ++i) {
    hQ[i] = &Q[i*NX*NX];
    hS[i] = &S[i*NU*NX];
    hR[i] = &R[i*NU*NU];
    hq[i] = &q[i*NX];
    hr[i] = &r[i*NU];
  }
  ///last stage
  hQ[N] = &Qf[0];
  hq[N] = &qf[0];
  //hx & hu & hmu & hlambda
  for (i=0; i<N; ++i) {
    hx[i] = &x[i*NX];
    hu[i] = &u[i*NU];
    hmu[i] = &work_mu[i*(2*(NX+NU)+2*nD[i])];
    hlambda[i] = &lambda[i*NX];
  }
  hx[N] = &x[N*NX];
  hmu[N] = &work_mu[N*(2*(NX+NU)+2*nD[N])];

  // initialize memory for HPMPC
  if(!@MODULE_NAME@_hpmpc_init) @MODULE_NAME@_hpmpc_init_fun(nx, nu_N, nb, hidxb, ng, N2);

  // eliminate x0:
  ///b0_new = b0 + A0*x0
  for (i=0; i<NX; ++i) {
    for (j=0; j<NX; ++j) hb[0][i] += hA[0][i*NX+j]*hx[0][j];
  }
  ///r0_new = r0 + S0*x0
  for (i=0; i<NU; ++i) {
    for (j=0; j<NX; ++j) hr[0][i] += hS[0][i*NX+j]*hx[0][j];
  }
  ///lg_new = lg - C0*x0, ug_new = ug - C0*x0
  for (i=0; i<nD[0]; ++i) {
    for (j=0; j<NX; ++j) hlg[0][i] -= hC[0][i*NX+j]*hx[0][j];
    for (j=0; j<NX; ++j) hug[0][i] -= hC[0][i*NX+j]*hx[0][j];
  }

  // call the IP solver
  double inf_norm_res[4];
  hpmpc_status = c_order_d_ip_ocp_hard_tv(nIt, K_MAX, MU0, MU_TOL, N, nx, nu_N, nb, hidxb, ng, N2, WARM_START, hA, hB, hb, hQ, hS, hR, hq, hr, hlb, hub, hC, hD, hlg, hug, hx, hu, hlambda, hmu, inf_norm_res, @MODULE_NAME@_work, stat);

  // restore original qpdata (required for a correct KKT value):
  ///b0_old = b0 + A0*x0
  for (i=0; i<NX; ++i) {
    for (j=0; j<NX; ++j) hb[0][i] -= hA[0][i*NX+j]*hx[0][j];
  }
  ///r0_old = r0 + S0*x0
  for (i=0; i<NU; ++i) {
    for (j=0; j<NX; ++j) hr[0][i] -= hS[0][i*NX+j]*hx[0][j];
  }
  ///lg_old = lg - C0*x0, ug_old = ug - C0*x0
  for (i=0; i<nD[0]; ++i) {
    for (j=0; j<NX; ++j) hlg[0][i] += hC[0][i*NX+j]*hx[0][j];
    for (j=0; j<NX; ++j) hug[0][i] += hC[0][i*NX+j]*hx[0][j];
  }

  // interpret Lagrange multipliers for inequality constraints
  memset(mu, 0, sizeof mu);
  for (j=0; j<N+1; ++j) {
    for (i=0; i<nb[j]; ++i) {
      if (hidxb[j][i] < nu_N[j]) offset = j*NU + hidxb[j][i];
      else offset =  N*NU + (j-1)*NX + hidxb[j][i]-nu_N[j]; // lb and ub do not contain bounds on x0, hence the -NX offset
      mu[offset] = hmu[j][i];
      offset += N*(NX+NU);
      mu[offset] = hmu[j][nb[j]+i];
    }
    for (i=0; i<nD[j]; ++i) {
      offset = 2*N*(NX+NU)+nDac[j]+i;
      mu[offset] = hmu[j][2*nb[j]+i];
      offset += nDac[N+1];
      mu[offset] = hmu[j][2*nb[j]+nD[j]+i];
    }
  }

#if PC_DEBUG == 1
  for (j = 0; j < *nIt; j++)
	  printf("k = %d\tsigma = %f\talpha = %f\tmu = %f\t\tmu = %e\talpha = %f\tmu = %f\t\tmu = %e\n", j,
			   stat[5*j+0], stat[5*j+1], stat[5*j+2], stat[5*j+2], stat[5*j+3], stat[5*j+4], stat[5*j+4]);
	  printf("\n");
#endif /* PC_DEBUG == 1 */

    return hpmpc_status;

}

int @MODULE_NAME@_hpmpc_get_num_its() {
  return *@MODULE_NAME@Workspace.nIt;
}
