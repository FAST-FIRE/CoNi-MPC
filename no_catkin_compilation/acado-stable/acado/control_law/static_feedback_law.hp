/*
 *    This file is part of ACADO Toolkit.
 *
 *    ACADO Toolkit -- A Toolkit for Automatic Control and Dynamic Optimization.
 *    Copyright (C) 2008-2009 by Boris Houska and Hans Joachim Ferreau, K.U.Leuven.
 *    Developed within the Optimization in Engineering Center (OPTEC) under
 *    supervision of Moritz Diehl. All rights reserved.
 *
 *    ACADO Toolkit is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    ACADO Toolkit is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with ACADO Toolkit; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */


/**
 *    \file include/acado/control_law/static_feedback_law.hpp
 *    \author Hans Joachim Ferreau, Boris Houska
 */


#ifndef ACADO_TOOLKIT_STATIC_FEEDBACK_LAW_HPP
#define ACADO_TOOLKIT_STATIC_FEEDBACK_LAW_HPP


#include <acado/utils/acado_utils.hpp>
#include <acado/function/function.hpp>
#include <acado/control_law/control_law.hpp>


BEGIN_NAMESPACE_ACADO


/** 
 *	\brief Implements a generic static FeedbackLaw to be used within a Controller.
 *
 *	\ingroup UserInterfaces
 *
 *  The class StaticFeedbackLaw implements a generic static FeedbackLaw to be used 
 *	within a Controller.
 *
 *	\author Hans Joachim Ferreau, Boris Houska
 */
class StaticFeedbackLaw : public ControlLaw
{
    //
    // PUBLIC MEMBER FUNCTIONS:
    //
    public:
		/** Default constructor. 
		 */
		StaticFeedbackLaw( );

		/** Default constructor. 
		 */
		StaticFeedbackLaw(	const OutputFcn& _staticFeedbackFcnU,
							double _samplingTime = DEFAULT_SAMPLING_TIME
							);

		/** Default constructor. 
		 */
		StaticFeedbackLaw(	const OutputFcn& _staticFeedbackFcnU,
							const OutputFcn& _staticFeedbackFcnP,
							double _samplingTime = DEFAULT_SAMPLING_TIME
							);

        /** Copy constructor (deep copy). */
        StaticFeedbackLaw(	const StaticFeedbackLaw& rhs
							);

		/** Destructor. 
		 */
		virtual ~StaticFeedbackLaw( );

		/** Assignment operator (deep copy). 
		 */
        StaticFeedbackLaw& operator=(	const StaticFeedbackLaw& rhs
		);

		virtual ControlLaw* clone( ) const;


        /** Initialization. */
		virtual returnValue init(	double startTime = 0.0,
									const Vector &x0_ = emptyConstVector,
									const Vector &p_ = emptyConstVector,
									const VariablesGrid& _yRef = emptyConstVariablesGrid
									);

		/** Executes next single step */
        virtual returnValue step(	double currentTime,
									const Vector& _x,			/**< Estimated differential states. */
									const Vector& _p,			/**< Estimated parameters. */
									const VariablesGrid& _yRef,
									const VariablesGrid& _yRefNext
									);

		/** Returns number of differential states.
		 *  \return Number of differential states */
		virtual uint getNX( ) const;

		/** Returns number of algebraic states.
		 *  \return Number of algebraic states */
		virtual uint getNXA( ) const;

		/** Returns number of previous controls.
		 *  \return Number of previous controls */
		virtual uint getNU( ) const;

		/** Returns number of parameters.
		 *  \return Number of parameters */
		virtual uint getNP( ) const;

		/** Returns number of disturbances.
		 *  \return Number of disturbances */
		virtual uint getNW( ) const;

		/** Returns number of process outputs.
		 *  \return Number of process outputs */
		virtual uint getNY( ) const;


		virtual BooleanType isDynamic( ) const;

		virtual BooleanType isStatic( ) const;


    //
    // PROTECTED MEMBER FUNCTIONS:
    //
    protected:



    //
    // DATA MEMBERS:
    //
    protected:
		OutputFcn* staticFeedbackFcnU;		/**< Static feedback law for controls. */
		OutputFcn* staticFeedbackFcnP;		/**< Static feedback law for parameters. */

};


CLOSE_NAMESPACE_ACADO


//#include <acado/control_law/static_feedback_law.ipp>


#endif  // ACADO_TOOLKIT_STATIC_FEEDBACK_LAW_HPP

/*
 *	end of file
 */
